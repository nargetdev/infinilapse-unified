// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gqlMgmt

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type AddPostInput struct {
	PostedBy UserRef      `json:"postedBy"`
	ImageURL string       `json:"imageURL"`
	Description string       `json:"description"`
	Likes    int          `json:"likes"`
	Comments []CommentRef `json:"comments"`
}

// GetPostedBy returns AddPostInput.PostedBy, and is useful for accessing the field via an interface.
func (v *AddPostInput) GetPostedBy() UserRef { return v.PostedBy }

// GetImageURL returns AddPostInput.ImageURL, and is useful for accessing the field via an interface.
func (v *AddPostInput) GetImageURL() string { return v.ImageURL }

// GetDescription returns AddPostInput.Description, and is useful for accessing the field via an interface.
func (v *AddPostInput) GetDescription() string { return v.Description }

// GetLikes returns AddPostInput.Likes, and is useful for accessing the field via an interface.
func (v *AddPostInput) GetLikes() int { return v.Likes }

// GetComments returns AddPostInput.Comments, and is useful for accessing the field via an interface.
func (v *AddPostInput) GetComments() []CommentRef { return v.Comments }

// AddPostsAddPostAddPostPayload includes the requested fields of the GraphQL type AddPostPayload.
type AddPostsAddPostAddPostPayload struct {
	Post []AddPostsAddPostAddPostPayloadPost `json:"post"`
}

// GetPost returns AddPostsAddPostAddPostPayload.Post, and is useful for accessing the field via an interface.
func (v *AddPostsAddPostAddPostPayload) GetPost() []AddPostsAddPostAddPostPayloadPost { return v.Post }

// AddPostsAddPostAddPostPayloadPost includes the requested fields of the GraphQL type Post.
type AddPostsAddPostAddPostPayloadPost struct {
	Description string `json:"description"`
	Id          string `json:"id"`
	Likes       int    `json:"likes"`
}

// GetDescription returns AddPostsAddPostAddPostPayloadPost.Description, and is useful for accessing the field via an interface.
func (v *AddPostsAddPostAddPostPayloadPost) GetDescription() string { return v.Description }

// GetId returns AddPostsAddPostAddPostPayloadPost.Id, and is useful for accessing the field via an interface.
func (v *AddPostsAddPostAddPostPayloadPost) GetId() string { return v.Id }

// GetLikes returns AddPostsAddPostAddPostPayloadPost.Likes, and is useful for accessing the field via an interface.
func (v *AddPostsAddPostAddPostPayloadPost) GetLikes() int { return v.Likes }

// AddPostsResponse is returned by AddPosts on success.
type AddPostsResponse struct {
	AddPost AddPostsAddPostAddPostPayload `json:"addPost"`
}

// GetAddPost returns AddPostsResponse.AddPost, and is useful for accessing the field via an interface.
func (v *AddPostsResponse) GetAddPost() AddPostsAddPostAddPostPayload { return v.AddPost }

type CommentRef struct {
	Id        string  `json:"id"`
	Text      string  `json:"text"`
	CommentBy UserRef `json:"commentBy"`
	CommentOn PostRef `json:"commentOn"`
}

// GetId returns CommentRef.Id, and is useful for accessing the field via an interface.
func (v *CommentRef) GetId() string { return v.Id }

// GetText returns CommentRef.Text, and is useful for accessing the field via an interface.
func (v *CommentRef) GetText() string { return v.Text }

// GetCommentBy returns CommentRef.CommentBy, and is useful for accessing the field via an interface.
func (v *CommentRef) GetCommentBy() UserRef { return v.CommentBy }

// GetCommentOn returns CommentRef.CommentOn, and is useful for accessing the field via an interface.
func (v *CommentRef) GetCommentOn() PostRef { return v.CommentOn }

// IndexImageAddStillFrameAddStillFramePayload includes the requested fields of the GraphQL type AddStillFramePayload.
type IndexImageAddStillFrameAddStillFramePayload struct {
	NumUids    int                                                     `json:"numUids"`
	StillFrame []IndexImageAddStillFrameAddStillFramePayloadStillFrame `json:"stillFrame"`
}

// GetNumUids returns IndexImageAddStillFrameAddStillFramePayload.NumUids, and is useful for accessing the field via an interface.
func (v *IndexImageAddStillFrameAddStillFramePayload) GetNumUids() int { return v.NumUids }

// GetStillFrame returns IndexImageAddStillFrameAddStillFramePayload.StillFrame, and is useful for accessing the field via an interface.
func (v *IndexImageAddStillFrameAddStillFramePayload) GetStillFrame() []IndexImageAddStillFrameAddStillFramePayloadStillFrame {
	return v.StillFrame
}

// IndexImageAddStillFrameAddStillFramePayloadStillFrame includes the requested fields of the GraphQL type StillFrame.
type IndexImageAddStillFrameAddStillFramePayloadStillFrame struct {
	Url        string    `json:"url"`
	Bucket     string    `json:"bucket"`
	CameraName string    `json:"cameraName"`
	Date       time.Time `json:"date"`
}

// GetUrl returns IndexImageAddStillFrameAddStillFramePayloadStillFrame.Url, and is useful for accessing the field via an interface.
func (v *IndexImageAddStillFrameAddStillFramePayloadStillFrame) GetUrl() string { return v.Url }

// GetBucket returns IndexImageAddStillFrameAddStillFramePayloadStillFrame.Bucket, and is useful for accessing the field via an interface.
func (v *IndexImageAddStillFrameAddStillFramePayloadStillFrame) GetBucket() string { return v.Bucket }

// GetCameraName returns IndexImageAddStillFrameAddStillFramePayloadStillFrame.CameraName, and is useful for accessing the field via an interface.
func (v *IndexImageAddStillFrameAddStillFramePayloadStillFrame) GetCameraName() string {
	return v.CameraName
}

// GetDate returns IndexImageAddStillFrameAddStillFramePayloadStillFrame.Date, and is useful for accessing the field via an interface.
func (v *IndexImageAddStillFrameAddStillFramePayloadStillFrame) GetDate() time.Time { return v.Date }

// IndexImageResponse is returned by IndexImage on success.
type IndexImageResponse struct {
	AddStillFrame IndexImageAddStillFrameAddStillFramePayload `json:"addStillFrame"`
}

// GetAddStillFrame returns IndexImageResponse.AddStillFrame, and is useful for accessing the field via an interface.
func (v *IndexImageResponse) GetAddStillFrame() IndexImageAddStillFrameAddStillFramePayload {
	return v.AddStillFrame
}

// MyQueryQueryUser includes the requested fields of the GraphQL type User.
type MyQueryQueryUser struct {
	Name string `json:"name"`
}

// GetName returns MyQueryQueryUser.Name, and is useful for accessing the field via an interface.
func (v *MyQueryQueryUser) GetName() string { return v.Name }

// MyQueryResponse is returned by MyQuery on success.
type MyQueryResponse struct {
	QueryUser []MyQueryQueryUser `json:"queryUser"`
}

// GetQueryUser returns MyQueryResponse.QueryUser, and is useful for accessing the field via an interface.
func (v *MyQueryResponse) GetQueryUser() []MyQueryQueryUser { return v.QueryUser }

type PostRef struct {
	Id       string       `json:"id"`
	PostedBy UserRef      `json:"postedBy"`
	ImageURL string       `json:"imageURL"`
	Description string       `json:"description"`
	Likes    int          `json:"likes"`
	Comments []CommentRef `json:"comments"`
}

// GetId returns PostRef.Id, and is useful for accessing the field via an interface.
func (v *PostRef) GetId() string { return v.Id }

// GetPostedBy returns PostRef.PostedBy, and is useful for accessing the field via an interface.
func (v *PostRef) GetPostedBy() UserRef { return v.PostedBy }

// GetImageURL returns PostRef.ImageURL, and is useful for accessing the field via an interface.
func (v *PostRef) GetImageURL() string { return v.ImageURL }

// GetDescription returns PostRef.Description, and is useful for accessing the field via an interface.
func (v *PostRef) GetDescription() string { return v.Description }

// GetLikes returns PostRef.Likes, and is useful for accessing the field via an interface.
func (v *PostRef) GetLikes() int { return v.Likes }

// GetComments returns PostRef.Comments, and is useful for accessing the field via an interface.
func (v *PostRef) GetComments() []CommentRef { return v.Comments }

type UserRef struct {
	Username       string    `json:"username"`
	Name           string    `json:"name"`
	About          string    `json:"about"`
	Email          string    `json:"email"`
	AvatarImageURL string    `json:"avatarImageURL"`
	Posts          []PostRef `json:"posts"`
	Following      []UserRef `json:"following"`
	Follower       []UserRef `json:"follower"`
}

// GetUsername returns UserRef.Username, and is useful for accessing the field via an interface.
func (v *UserRef) GetUsername() string { return v.Username }

// GetName returns UserRef.Name, and is useful for accessing the field via an interface.
func (v *UserRef) GetName() string { return v.Name }

// GetAbout returns UserRef.About, and is useful for accessing the field via an interface.
func (v *UserRef) GetAbout() string { return v.About }

// GetEmail returns UserRef.Email, and is useful for accessing the field via an interface.
func (v *UserRef) GetEmail() string { return v.Email }

// GetAvatarImageURL returns UserRef.AvatarImageURL, and is useful for accessing the field via an interface.
func (v *UserRef) GetAvatarImageURL() string { return v.AvatarImageURL }

// GetPosts returns UserRef.Posts, and is useful for accessing the field via an interface.
func (v *UserRef) GetPosts() []PostRef { return v.Posts }

// GetFollowing returns UserRef.Following, and is useful for accessing the field via an interface.
func (v *UserRef) GetFollowing() []UserRef { return v.Following }

// GetFollower returns UserRef.Follower, and is useful for accessing the field via an interface.
func (v *UserRef) GetFollower() []UserRef { return v.Follower }

// __AddPostsInput is used internally by genqlient
type __AddPostsInput struct {
	PostData []AddPostInput `json:"postData"`
}

// GetPostData returns __AddPostsInput.PostData, and is useful for accessing the field via an interface.
func (v *__AddPostsInput) GetPostData() []AddPostInput { return v.PostData }

// __IndexImageInput is used internally by genqlient
type __IndexImageInput struct {
	Url        string    `json:"url"`
	Bucket     string    `json:"bucket"`
	CameraName string    `json:"cameraName"`
	Date       time.Time `json:"date"`
}

// GetUrl returns __IndexImageInput.Url, and is useful for accessing the field via an interface.
func (v *__IndexImageInput) GetUrl() string { return v.Url }

// GetBucket returns __IndexImageInput.Bucket, and is useful for accessing the field via an interface.
func (v *__IndexImageInput) GetBucket() string { return v.Bucket }

// GetCameraName returns __IndexImageInput.CameraName, and is useful for accessing the field via an interface.
func (v *__IndexImageInput) GetCameraName() string { return v.CameraName }

// GetDate returns __IndexImageInput.Date, and is useful for accessing the field via an interface.
func (v *__IndexImageInput) GetDate() time.Time { return v.Date }

func AddPosts(
	ctx context.Context,
	client graphql.Client,
	postData []AddPostInput,
) (*AddPostsResponse, error) {
	req := &graphql.Request{
		OpName: "AddPosts",
		Query: `
mutation AddPosts ($postData: [AddPostInput!]!) {
	addPost(input: $postData) {
		post {
			description
			id
			likes
			description
		}
	}
}
`,
		Variables: &__AddPostsInput{
			PostData: postData,
		},
	}
	var err error

	var data AddPostsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func IndexImage(
	ctx context.Context,
	client graphql.Client,
	url string,
	bucket string,
	cameraName string,
	date time.Time,
) (*IndexImageResponse, error) {
	req := &graphql.Request{
		OpName: "IndexImage",
		Query: `
mutation IndexImage ($url: String!, $bucket: String!, $cameraName: String!, $date: DateTime!) {
	addStillFrame(input: {url:$url,bucket:$bucket,cameraName:$cameraName,date:$date}) {
		numUids
		stillFrame {
			url
			bucket
			cameraName
			date
		}
	}
}
`,
		Variables: &__IndexImageInput{
			Url:        url,
			Bucket:     bucket,
			CameraName: cameraName,
			Date:       date,
		},
	}
	var err error

	var data IndexImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func MyQuery(
	ctx context.Context,
	client graphql.Client,
) (*MyQueryResponse, error) {
	req := &graphql.Request{
		OpName: "MyQuery",
		Query: `
query MyQuery {
	queryUser {
		name
	}
}
`,
	}
	var err error

	var data MyQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
